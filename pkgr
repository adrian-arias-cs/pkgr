#!/bin/bash

OK=0
INVALID_OPTS=1
INVALID_PKGTYPE=2
INVALID_PARAMS=3
NO_DESCRIPTION=4
OTHER_ERROR=127

[[ -n $DEBUG ]] && DEBUG=$DEBUG || DEBUG=0

die()
{
    local exit_code=$OTHER_ERROR
    local frame=0
    [[ -n $2 ]] && exit_code=$2

    echo "$*"

    if [ -n ${DEBUG} ] && [ ${DEBUG} -eq 1 ]; then
        while caller $frame; do
            ((frame++))
        done
    fi

    exit $exit_code
}

usage()
{
cat << EOF

Usage: $0 options project_name version_string

This script generates either debian or rpm packages (source and binary) from projects in git source control.

OPTIONS:
 -h|--help                                      Show this message
 -t[package type]|--type[=package type] 	Specify the package type, either 'rpm' or 'deb'
 -n|--new                                       Build a first release package
 -d|--description                               Description of the project
 --runtime_deps='dep1, dep2, ...'               Comma seperated list of runtime dependencies
 --build-deps='dep1, dep2, ...'                 Comma seperated list of build dependencies
 --packager-name=<packager_name>                Name of the package maintainer
 --packager-email=<packager_email>              Email address of the package maintainer
 -i<iteration>|--iteration=<iteration>          The package revision
 -s<section>|--section=<section>                The section, group or category of this package
 --rules-file                                   The file to use for debian/rules (for overriding buildsystem sequences -- only debian)
 --install-file                                 List of files to install (debian only -- see man pkgr for example)

PARAMETERS:
 project_name                                   The name of the project (as it is in the VCS)
 version_string                                 The version to package (must be a tagged release)

EOF
}

if [[ $DEBUG -eq 1 ]]; then
    ARGS=`getopt -o t::nd::s::h --long type::,new,description::,help,runtime-deps::,homepage::,section:: -n "$0" -- "$@"`
else
    ARGS=`getopt -o t::nd::s::h --long type::,new,description::,help,runtime-deps::,homepage::,section:: -n "$0" -q -- "$@"`
fi

# escape whitespace in arguments
eval set -- "$ARGS"

PKGTYPE='deb'
IS_NEW=0
DESCRIPTION=''

while true; do
    case "$1" in
        -t|--type)
            case "$2" in
                ""|deb|debian) PKGTYPE='deb'; shift 2;;
                rpm) PKGTYPE='rpm'; shift 2;;
                *)
                    echo "Invalid package type. See $0 -h for more info.";
                    exit $INVALID_PKGTYPE
                    ;;
            esac ;;
        -n|--new)
            IS_NEW=1; shift;;
        -d|--description)
            DESCRIPTION="$2"; shift 2;;
        --runtime-deps)
            RUNTIME_DEPS="$2"; shift 2;;
        --homepage)
            HOMEPAGE="$2"; shift 2;;
        -s|--section)
            SECTION="$2"; shift 2;;
        -h|--help)
            usage; exit $OK;;
        --)
            shift;
            break
            ;;
        *)
            usage;
            exit $INVALID_OPTS;
            break;;
    esac
done

the_rest=$@
#if [ $# -lt 2 ]; then
#    echo 'At least two parameters are required (project_name and version_string).'
#    usage; exit $INVALID_OPTS
#fi

# Split the remaining parameters by space and into an array.
IFS=' ' read -a PARAMS <<< "$the_rest"
# The remaining arguments should contain exactly two strings.
# Additional parameters detected.
if [ ${#PARAMS[@]} -gt 2 ]; then
    invalid_count=`expr ${#PARAMS[@]} - 2`
    invalid_params=''
    if [ $invalid_count -eq 1 ]; then
        word_for_param='parameter'
    else
        word_for_param='parameters'
    fi
    echo "${invalid_count} superfluous ${word_for_param} detected."
    echo "Inspect the output and try again using appropriate parameters."
    for index in "${!PARAMS[@]}"
    do
        invalid_params="${invalid_params} ${PARAMS[index]}"
    done
    echo "${invalid_params}"
    usage; exit $INVALID_PARAMS
# Insufficient number of parameters detected
elif [ "${#PARAMS[@]}" -lt 2 ]; then
    echo 'At least two parameters are required (project_name and version_string).'
    usage; exit $INVALID_PARAMS
# The remaining arguments should represent the project and the version to be packaged.
# Attempt to capture the project name and version string regardless of their order.
else
    for index in "${!PARAMS[@]}"
    do
        if [[ "${PARAMS[index]}" =~ ^([0-9]){1,2}\.([0-9]){1,2}\.([0-9]){1,3}(-rc([0-9]){1,2})?$ ]]; then
            version_string="${PARAMS[index]}"
        else
            project_name=${PARAMS[index]}
        fi
    done
fi

if [ -n "${version_string}" -a -n "${project_name}" ]; then
    # validate string provided as project name
    if [[ ! "${project_name}" =~ ^([A-Za-z0-9._-])+$ ]]; then
        echo "The project name \"${project_name}\" seems to be invalid"
        exit $INVALID_PARAMS
    fi
else
    # If version_string is zero-length then it was not matched previously.
    if [ -z "${version_string}" ]; then
        echo 'unable to determine version string'
    elif [ -z "${project_name}" ]; then
        echo 'unable to determine project name'
    fi
    usage
    exit $INVALID_PARAMS
fi

if [ $IS_NEW -eq 1 ]; then
    echo 'Building package from initial release'
    if [ -z "${DESCRIPTION}" ]; then
        echo 'A description is necessary'
        exit $INVALID_PARAMS
    fi
fi

case ${PKGTYPE} in
    deb)
        echo 'Packaging for Debian-based distros.'
        . ./lib/pkgdeb.sh "${project_name}" "${version_string}"
        ;;
    rpm) echo 'Packaging for RedHat-based distros.';;
esac

# vim: ts=4 sw=4 expandtab

